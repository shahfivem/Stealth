{"version":3,"sources":["utils/misc.ts","hooks/useNuiEvent.ts","components/App.tsx","index.tsx"],"names":["noop","useNuiEvent","action","handler","savedHandler","useRef","useEffect","current","eventListener","event","eventAction","data","window","addEventListener","removeEventListener","App","hidden","setHidden","useState","isVisible","setIsVisible","width","setWidth","text","setText","desc","setDesc","showTime","setShowTime","time","setTime","status","setStatus","blackbars","setBlackbars","preventCancel","setPreventCancel","console","log","setTimeout","_jsxs","className","concat","style","visibility","children","_jsx","display","paddingRight","height","viewBox","fill","xmlns","d","ReactDOM","render","document","getElementById"],"mappings":"uIAEO,MAGMA,EAAOA,OCiBPC,EAAcA,CACzBC,EACAC,KAEA,MAAMC,EAAyDC,iBAAOL,GAGtEM,qBAAU,KACRF,EAAaG,QAAUJ,CAAO,GAC7B,CAACA,IAEJG,qBAAU,KACR,MAAME,EAAiBC,IACrB,MAAQP,OAAQQ,EAAW,KAAEC,GAASF,EAAME,KAExCP,EAAaG,SACXG,IAAgBR,GAClBE,EAAaG,QAAQI,EAEzB,EAKF,OAFAC,OAAOC,iBAAiB,UAAWL,GAE5B,IAAMI,OAAOE,oBAAoB,UAAWN,EAAc,GAChE,CAACN,GAAQ,E,WCoDCa,MAlFOA,KAEpB,MAAOC,EAAQC,GAAaC,oBAAS,IAC9BC,EAAWC,GAAgBF,oBAAS,IACpCG,EAAOC,GAAYJ,mBAAS,IAE5BK,EAAMC,GAAWN,mBAAS,WAC1BO,EAAMC,GAAWR,mBAAS,+BAE1BS,EAAUC,GAAeV,oBAAS,IAClCW,EAAMC,GAAWZ,mBAAS,IAE1Ba,EAAQC,GAAad,mBAAS,WAC9Be,EAAWC,GAAgBhB,oBAAS,IACpCiB,EAAeC,GAAoBlB,oBAAS,GA6CnD,OA3CAjB,EAAqB,cAAeU,IAClCS,EAAaT,EAAK,IAGpBV,EAAoB,cAAeU,IACjCa,EAAQb,EAAK,IAGfV,EAAoB,cAAeU,IACjCe,EAAQf,EAAK,IAGfV,EAAoB,eAAgBU,IAClCW,EAASX,EAAK,IAGhBV,EAAoB,cAAeU,IACjCmB,EAAQnB,EAAK,IAGfV,EAAoB,gBAAiBU,IACnCqB,EAAUrB,EAAK,IAGjBV,EAAqB,mBAAoBU,IACvCuB,EAAavB,EAAK,IAGpBV,EAAqB,iBAAkBU,IACrCyB,EAAiBzB,EAAK,IAGxBV,EAAqB,YAAaU,IAChC0B,QAAQC,IAAI,gBAAiB3B,GAC7BiB,EAAYjB,EAAK,IAGnBL,qBAAU,KACRiC,YAAW,KACTtB,GAAU,EAAM,GACf,IAAI,GACN,CAACD,IAGFwB,eAAA,OAAKC,UAAS,eAAAC,OAAiBvB,EAAS,eAAAuB,OAAcT,GAAaU,MAAO,CAAEC,WAAY5B,EAAS,SAAW,WAAY6B,SAAA,CACtHL,eAAA,OAAKC,UAAU,oBAAmBI,SAAA,CAAC,IAAEtB,EAAK,OAC1CiB,eAAA,OAAKC,UAAU,oBAAmBI,SAAA,CAAC,IAAGlB,EAAWE,EAAO,GAAI,IAAEJ,EAAK,OACnEe,eAAA,OAAKC,UAAS,gBAAAC,OAAkBX,GAASc,SAAA,CACvCC,cAAA,OAAKL,UAAS,0BAAAC,OAA4BX,GAAUY,MAAO,CAAEtB,MAAO,UACpEyB,cAAA,OAAKL,UAAS,mBAAAC,OAAqBX,GAAUY,MAAO,CAAEtB,MAAOA,EAAQ,UAKvEmB,eAAA,OAAKC,UAAU,sBAAuBE,MAAO,CAACI,QAASZ,EAAgB,OAAS,IAAKU,SAAA,CAEnFC,cAAA,OAAKL,UAAU,MAAME,MAAO,CAAEK,aAAc,OAAS3B,MAAM,KAAK4B,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,6BAA4BP,SAC5IC,cAAA,QAAMO,EAAE,q8BAAq8BF,KAAK,YAGp9BL,cAAA,QAAML,UAAU,WAAUI,SAAC,mBAEzB,EC1FVS,IAASC,OACPT,cAAC/B,EAAG,IACJyC,SAASC,eAAe,Q","file":"static/js/main.c81a70e2.chunk.js","sourcesContent":["// Will return whether the current environment is in a regular browser\n// and not CEF\nexport const isEnvBrowser = (): boolean => !(window as any).invokeNative\n\n// Basic no operation function\nexport const noop = () => {}","import {MutableRefObject, useEffect, useRef} from \"react\";\nimport {noop} from \"../utils/misc\";\n\ninterface NuiMessageData<T = unknown> {\n  action: string;\n  data: T;\n}\n\ntype NuiHandlerSignature<T> = (data: T) => void;\n\n/**\n * A hook that manage events listeners for receiving data from the client scripts\n * @param action The specific `action` that should be listened for.\n * @param handler The callback function that will handle data relayed by this hook\n *\n * @example\n * useNuiEvent<{visibility: true, wasVisible: 'something'}>('setVisible', (data) => {\n *   // whatever logic you want\n * })\n *\n **/\n\nexport const useNuiEvent = <T = any>(\n  action: string,\n  handler: (data: T) => void\n) => {\n  const savedHandler: MutableRefObject<NuiHandlerSignature<T>> = useRef(noop);\n\n  // When handler value changes set mutable ref to handler val\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(() => {\n    const eventListener = (event: MessageEvent<NuiMessageData<T>>) => {\n      const { action: eventAction, data } = event.data;\n\n      if (savedHandler.current) {\n        if (eventAction === action) {\n          savedHandler.current(data);\n        }\n      }\n    };\n\n    window.addEventListener(\"message\", eventListener);\n    // Remove Event Listener on component cleanup\n    return () => window.removeEventListener(\"message\", eventListener);\n  }, [action]);\n};","import React, {useState} from 'react';\nimport './App.css'\nimport {useNuiEvent} from \"../hooks/useNuiEvent\";\nimport {debugData} from \"../utils/debugData\";\nimport {fetchNui} from \"../utils/fetchNui\";\nimport { useEffect } from 'react';\n\n// This will set the NUI to visible if we are\n// developing in browser\ndebugData([\n  {\n    action: 'setVisible',\n    data: true,\n  }\n])\n\n\nconst App: React.FC = () => {\n  \n  const [hidden, setHidden] = useState(true)\n  const [isVisible, setIsVisible] = useState(false)\n  const [width, setWidth] = useState(0)\n\n  const [text, setText] = useState(\"HOLD E\")\n  const [desc, setDesc] = useState(\"to respawn or wait for EMS\")\n\n  const [showTime, setShowTime] = useState(true)\n  const [time, setTime] = useState(0)\n\n  const [status, setStatus] = useState(\"normal\")\n  const [blackbars, setBlackbars] = useState(false)\n  const [preventCancel, setPreventCancel] = useState(false)\n\n  useNuiEvent<boolean>('setVisible', (data) => {\n    setIsVisible(data)\n  })\n\n  useNuiEvent<string>('updateText', (data: string) => {\n    setText(data)\n  })\n\n  useNuiEvent<string>('updateDesc', (data: string) => {\n    setDesc(data)\n  })\n\n  useNuiEvent<number>('updateWidth', (data: number) => {\n    setWidth(data)\n  })\n\n  useNuiEvent<number>('updateTime', (data: number) => {\n    setTime(data)\n  })\n\n  useNuiEvent<string>('updateStatus', (data: string) => {\n    setStatus(data)\n  })\n\n  useNuiEvent<boolean>('updateBlackbars', (data: boolean) => {\n    setBlackbars(data)\n  })\n\n  useNuiEvent<boolean>('preventCancel', (data: boolean) => {\n    setPreventCancel(data)\n  })\n\n  useNuiEvent<boolean>('showTime', (data: boolean) => {\n    console.log(\"Showing time!\", data)\n    setShowTime(data)\n  })\n\n  useEffect(() => {\n    setTimeout(() => {\n      setHidden(false)\n    }, 100);\n  }, [hidden])\n\n  return (\n    <div className={`nui-wrapper ${isVisible} blackbars-${blackbars}`} style={{ visibility: hidden ? 'hidden' : 'visible' }}  >\n      <div className=\"progress-bar-text\"> {text} </div>\n      <div className=\"progress-bar-desc\"> { showTime ? time : \"\" } {desc} </div>\n      <div className={`progress-bar ${status}`} >\n        <div className={`progress-inside-shadow ${status}`} style={{ width: \"100%\" }}></div>\n        <div className={`progress-inside ${status}`} style={{ width: width + \"%\" }}></div>\n      </div>\n\n     \n\n      <div className=\"progress-bar-cancel\"  style={{display: preventCancel ? 'none' : '' }} > \n\n        <svg className=\"rmb\" style={{ paddingRight: '8px' }} width=\"24\" height=\"22\" viewBox=\"0 0 24 22\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M18.0042 9.00417L16.0792 11L18.0042 12.9583C18.4292 13.35 18.4292 13.9833 18.0042 14.3375C17.65 14.7625 17.0167 14.7625 16.625 14.3375L14.6667 12.4125L12.6708 14.3375C12.3167 14.7625 11.6833 14.7625 11.2917 14.3375C10.9042 13.9833 10.9042 13.35 11.2917 12.9583L13.2542 11L11.2917 9.00417C10.9042 8.65 10.9042 8.01667 11.2917 7.625C11.6833 7.2375 12.3167 7.2375 12.6708 7.625L14.6667 9.5875L16.625 7.625C17.0167 7.2375 17.65 7.2375 18.0042 7.625C18.4292 8.01667 18.4292 8.65 18.0042 9.00417ZM21.3333 3C22.8042 3 24 4.19375 24 5.66667V16.3333C24 17.8042 22.8042 19 21.3333 19H8.55417C7.84583 19 7.16667 18.7208 6.66667 18.2208L0.3905 11.9417C0.140458 11.6917 0 11.3542 0 11C0 10.6458 0.1405 10.3083 0.3905 10.0583L6.66667 3.78125C7.16667 3.28083 7.84583 3 8.55417 3H21.3333ZM22 5.66667C22 5.3 21.7 5 21.3333 5H8.55417C8.375 5 8.20417 5.07083 8.07917 5.19583L2.27625 11L8.07917 16.8042C8.20417 16.9292 8.375 17 8.55417 17H21.3333C21.7 17 22 16.7 22 16.3333V5.66667Z\" fill=\"white\"/>\n        </svg>\n\n        <span className=\"tocancel\">to cancel</span>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}