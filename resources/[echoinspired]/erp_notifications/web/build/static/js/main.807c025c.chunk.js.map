{"version":3,"sources":["components/App.tsx","Notifications/Notification.tsx","utils/misc.ts","Notifications/NotificationProvider.tsx","hooks/useNuiEvent.ts","index.tsx"],"names":["App","_jsx","Notification","props","exit","setExit","useState","useEffect","setTimeout","dispatch","type","id","persist","handleStartTimer","clearInterval","length","_jsxs","className","concat","children","message","noop","NotificationProvider","state","useReducer","action","payload","filter","el","useNuiEvent","handler","savedHandler","useRef","current","eventListener","event","eventAction","data","window","addEventListener","removeEventListener","v4","map","note","ReactDOM","render","document","getElementById"],"mappings":"gJASeA,MANOA,IAElBC,cAAA,UCkCWC,MArCOC,IAErB,MAAOC,EAAMC,GAAWC,oBAAS,GA8BjC,OAZAC,qBAAU,KACLH,GATJI,YAAW,KACVL,EAAMM,SAAS,CACdC,KAAM,sBACNC,GAAIR,EAAMQ,IACT,GACA,IAMH,GACE,CAACP,IAEJG,qBAAU,KACJJ,EAAMS,SAvBaC,MACxB,MAAMF,EAAKH,YAAW,KACrBH,GAAQ,GACRS,cAAcH,EAAG,GACfR,EAAMY,OAAO,EAoBfF,EACD,GACE,IAGFG,eAAA,OAAKC,UAAS,gBAAAC,OAAkBf,EAAMO,KAAI,KAAAQ,OAAKd,EAAO,UAAY,IAAMe,SAAA,CAAE,IAAEhB,EAAMiB,QAAQ,MAAO,ECjC5F,MAGMC,EAAOA,O,YCsDLC,MA7CenB,IAE7B,MAAOoB,EAAOd,GAAYe,sBAAW,CAACD,EAAOE,KAC5C,OAAOA,EAAOf,MACb,IAAK,mBACJ,MAAO,IAAIa,EAAO,IAAIE,EAAOC,UAC9B,IAAK,sBACJ,OAAOH,EAAMI,QAAOC,GAAMA,EAAGjB,KAAOc,EAAOd,KAC5C,QACC,OAAOY,EACT,GACE,IAsBH,MCzB0BM,EACzBJ,EACAK,KAEA,MAAMC,EAAyDC,iBAAOX,GAGtEd,qBAAU,KACRwB,EAAaE,QAAUH,CAAO,GAC7B,CAACA,IAEJvB,qBAAU,KACR,MAAM2B,EAAiBC,IACrB,MAAQV,OAAQW,EAAW,KAAEC,GAASF,EAAME,KAExCN,EAAaE,SACXG,IAAgBX,GAClBM,EAAaE,QAAQI,EAEzB,EAKF,OAFAC,OAAOC,iBAAiB,UAAWL,GAE5B,IAAMI,OAAOE,oBAAoB,UAAWN,EAAc,GAChE,CAACT,GAAQ,EDpBbI,CAA2B,gBAAiBQ,IACtB,QAAjBA,EAAKzB,QAOTH,EAAS,CACRC,KAAM,mBACNgB,QAAS,CACRf,GAAI0B,EAAK1B,IAAM8B,cACf/B,KAAM2B,EAAK3B,KACXU,QAASiB,EAAKjB,QACdL,OAAQsB,EAAKtB,OACbH,QAASyB,EAAKzB,UAAW,KAb1BH,EAAS,CACRC,KAAM,sBACNC,GAAI0B,EAAK1B,IAaT,IAIFK,eAAA,OAAAG,SAAA,CACClB,cAAA,OAAKgB,UAAU,yBAAwBE,SACrCI,EAAMmB,KAAKC,GACJ1C,cAACC,EAAY,CAACO,SAAUA,KAA4BkC,GAAbA,EAAKhC,QAGpDR,EAAMgB,WACF,EEhDRyB,IAASC,OACP5C,cAACqB,EAAoB,CAAAH,SACnBlB,cAACD,EAAG,MAEN8C,SAASC,eAAe,Q","file":"static/js/main.807c025c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css'\n\nconst App: React.FC = () => {\n  return (\n    <div></div>\n  );\n}\n\nexport default App;\n","import {useEffect, useState} from 'react';\n\nconst Notification = (props: any) => {\n\n\tconst [exit, setExit] = useState(false)\n\n\tconst handleStartTimer = () => {\n\t\tconst id = setTimeout(() => {\n\t\t\tsetExit(true)\n\t\t\tclearInterval(id)\n\t\t}, props.length)\n\t}\n \n\tconst handleCloseNotification = () => {\n\t\tsetTimeout(() => {\n\t\t\tprops.dispatch({\n\t\t\t\ttype: \"REMOVE_NOTIFICATION\",\n\t\t\t\tid: props.id\n\t\t\t})\n\t\t}, 250)\n\t}\n\n\tuseEffect(() => {\n\t\tif (exit) {\n\t\t\thandleCloseNotification()\n\t\t}\n\t}, [exit])\n\n\tuseEffect(() => {\n\t\tif (!props.persist) {\n\t\t\thandleStartTimer()\n\t\t}\n\t}, [])\n \n\treturn(\n\t\t<div className={`notification ${props.type} ${ exit ? \"fadeOut\" : \"\" }`} > {props.message} </div>\n\t)\n}\n\nexport default Notification","// Will return whether the current environment is in a regular browser\n// and not CEF\nexport const isEnvBrowser = (): boolean => !(window as any).invokeNative\n\n// Basic no operation function\nexport const noop = () => {}","import {useReducer} from 'react';\nimport Notification from './Notification'\nimport {useNuiEvent} from \"../hooks/useNuiEvent\";\n\nimport {v4} from 'uuid'\n\ninterface INotification {\n\tid: string\n  type: string\n  message: string\n  length: number\n\tpersist: string\n}\n\nconst NotificationProvider = (props: any) => {\n\n\tconst [state, dispatch] = useReducer((state, action) => {\n\t\tswitch(action.type) {\n\t\t\tcase 'ADD_NOTIFICATION':\n\t\t\t\treturn [...state, {...action.payload}];\n\t\t\tcase 'REMOVE_NOTIFICATION':\n\t\t\t\treturn state.filter(el => el.id !== action.id);\n\t\t\tdefault:\n\t\t\t\treturn state;\n\t\t}\n\t}, []);\n\n\tuseNuiEvent<INotification>('notification', (data) => {\n\t\tif (data.persist === \"END\") {\n\t\t\tdispatch({\n\t\t\t\ttype: \"REMOVE_NOTIFICATION\",\n\t\t\t\tid: data.id\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tdispatch({\n\t\t\ttype: \"ADD_NOTIFICATION\",\n\t\t\tpayload: {\n\t\t\t\tid: data.id || v4(),\n\t\t\t\ttype: data.type,\n\t\t\t\tmessage: data.message,\n\t\t\t\tlength: data.length,\n\t\t\t\tpersist: data.persist || false\n\t\t\t}\n\t\t})\t\t\n  \t})\n\n\treturn(\n\t\t<div>\n\t\t\t<div className=\"notification-container\">\n\t\t\t\t{state.map((note) => {\n\t\t\t\t\treturn <Notification dispatch={dispatch} key={note.id} {...note} />\n\t\t\t\t})}\n\t\t\t</div>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n}\n\nexport default NotificationProvider","import {MutableRefObject, useEffect, useRef} from \"react\";\nimport {noop} from \"../utils/misc\";\n\ninterface NuiMessageData<T = unknown> {\n  action: string;\n  data: T;\n}\n\ntype NuiHandlerSignature<T> = (data: T) => void;\n\n/**\n * A hook that manage events listeners for receiving data from the client scripts\n * @param action The specific `action` that should be listened for.\n * @param handler The callback function that will handle data relayed by this hook\n *\n * @example\n * useNuiEvent<{visibility: true, wasVisible: 'something'}>('setVisible', (data) => {\n *   // whatever logic you want\n * })\n *\n **/\n\nexport const useNuiEvent = <T = any>(\n  action: string,\n  handler: (data: T) => void\n) => {\n  const savedHandler: MutableRefObject<NuiHandlerSignature<T>> = useRef(noop);\n\n  // When handler value changes set mutable ref to handler val\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(() => {\n    const eventListener = (event: MessageEvent<NuiMessageData<T>>) => {\n      const { action: eventAction, data } = event.data;\n\n      if (savedHandler.current) {\n        if (eventAction === action) {\n          savedHandler.current(data);\n        }\n      }\n    };\n\n    window.addEventListener(\"message\", eventListener);\n    // Remove Event Listener on component cleanup\n    return () => window.removeEventListener(\"message\", eventListener);\n  }, [action]);\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nimport NotificationProvider from './Notifications/NotificationProvider'\n\nReactDOM.render(\n  <NotificationProvider>\n    <App /> \n  </NotificationProvider>,  \n  document.getElementById('root')\n);\n"],"sourceRoot":""}